/* Generated By:JJTree&JavaCC: Do not edit this line. comp.java */
import java.util.ArrayList;
public class comp/*@bgen(jjtree)*/implements compTreeConstants, compConstants {/*@bgen(jjtree)*/
  protected static JJTcompState jjtree = new JJTcompState();static String recuperacion="";
   public static ArrayList<contenedor> contenedores= new ArrayList<contenedor>();
   static String tipo="";
   public static contenedor c;

   static  Token operador;
 static Token D1;
 static Token D2;
static int cambio=0;
  public static ArrayList<Token> acumular= new ArrayList<Token>();
static Boolean activo=false;
 static Boolean activoif=false;
 static Token asignar;
static Token asignar_id;


  public static ArrayList<Token> getAcumular() {
        return acumular;
}

public static void setAcumular(ArrayList<Token> acumular) {
        comp.acumular = acumular;
}


  public static ArrayList<contenedor> getContenedores() {
        return contenedores;
}

public static void setContenedores(ArrayList<contenedor> contenedores) {
        comp.contenedores = contenedores;
}


  public static String getRecuperacion()
  {
    return recuperacion;
  }

  public static void setRecuperacion(String recuperacion)
  {
    comp.recuperacion = recuperacion;
  }


 public static void error_skipto(int kind)
  {

    ParseException e = generateParseException(); // se genera el objeto excepción
    recuperacion= recuperacion.concat(e.toString()+"\u005cn");
    System.out.println(e.toString()); // se imprime el mensaje de error
    Token t;
    do
    {
      t = getNextToken();
       System.out.println("hola"+t);
    }
  while (t.kind != kind && t.kind==FINARCH);
  }

  public static void main(String args []) throws ParseException
  {

        try
        {
          System.out.println("Ingrese el c\u00f3digo a analizar:");
          comp analizador = new comp(System.in);
          SimpleNode variable= analizador.Programa();
          variable.dump("");
          System.out.println("Se ha compilado con \u00e9xito");
        }
        catch(ParseException e)
        {
          System.err.println("Se han encontrado errores");
          System.err.println(e.getMessage());

        }

  }



//semantico


//busca si ya esta el token
static public boolean verificarRepetido(Token token)
{
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}

}

if(encontro==true)
{
recuperacion+="Error Semantico:  ya se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\u005cn";
return false;
}
else
return true;
}//

//verifica que este declarado
static public void verificardeclarado(Token token) {

boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}

}

if(encontro!=true)
{
recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\u005cn";
}
/*
else {

  if(!buscarTipo(token).equals("Cadena")) 
recuperacion+="Error Semantico:  no es tipo cadena encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";

  }
*/




}//

//asigna el valor concuerda con el tipo
static void verificar_asignacion(Token a,Token b)
{

String dato1=" ",dato2="";

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}

if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico: no se  le puede asignar a esta variable: "+a.image+" no son del mismo tipo: "+" En la Linea "+a.beginLine+", en la columna "+a.beginColumn+ "\u005cn";
recuperacion+="Error Semantico: no se puede asignar: "+b.image+" En la Linea "+b.beginLine+" ,en la columna "+b.beginColumn+ "\u005cn";
}
else {

asignar(a.image);
  }





}//


//devuelve tipo
static String buscar(String identificador)
{
  String dato=" ";

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(identificador))
{

dato=contenedores.get(i).getTipo();

}
}
return dato;

}//



//verifica que el token se encuentre
static void inicializada(Token t) {
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}

}

if(encontro==false)
{

int intIndex = recuperacion.indexOf("Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\u005cn");

if(intIndex==-1){

recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\u005cn";
}

}

/*
if(encontro==true) {
if(!buscar(t.image).equals("Cadena")) {
recuperacion+="Error Semantico: la variable debe de ser tipo cadena : "+t.image+" En la Linea "+t.beginLine+"en la columna "+t.beginColumn+ "\n";

  }
  

  }
*/


}//cierra funcion



//validar if
static void validar(Token a, Token b ,Token operador) {
String dato1=" ";
String dato2=" ";


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}
if(a.image!=null&&b.image!=null)
{


if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico:  no son del mismo tipo las variables: "+a.image+" , "+b.image  + " En la Linea "+a.beginLine+",en la columna "+a.beginColumn+ "\u005cn";
}

if("<=".equals(operador.image)||">=".equals(operador.image)||"<".equals(operador.image)||">".equals(operador.image) )
{
if(!dato1.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \u005ct " +a.image+" En la Linea "+a.beginLine+",en la columna "+a.beginColumn+"\u005cn";

if(!dato2.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \u005ct "+b.image+" En la Linea "+b.beginLine+",en la columna "+b.beginColumn+ "\u005cn";
}

}



}//cierra funcion



static void analizarAsignacion(Token a) {
 String tipo=buscar(a.image);
Boolean entrociclo=false;
   for(int i=1;i<acumular.size();i++)
   {
      if(!acumular.get(i).image.equals("+")&&!acumular.get(i).image.equals("-")&&!acumular.get(i).image.equals("*")&&!acumular.get(i).image.equals("/")&&!acumular.get(i).image.equals("]") ) {
             String tipo2=buscar(acumular.get(i).image);

             if(!tipo.equals(tipo2)&&validarDeclarado(acumular.get(i))==true) {
                        recuperacion+="Error Semantico: no se puede asignar esta variable "+acumular.get(i).image+" En la Linea "+acumular.get(i).beginLine+" en la columna "+acumular.get(i).beginColumn+" no es del mismo tipo: "+tipo2+" con la variaable:\u005ct "+a.image+"de tipo: " +tipo+ "\u005cn";
                        entrociclo=true;
                        }else
                        verificarAsignacion(acumular.get(i));
      }
    }

if(!entrociclo) {
asignar(a.image);
}

     }//


//se encarga de analizar si el token tiene una asignacion 
static void verificarAsignacion(Token a) {



for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  if(contenedores.get(i).getAsignacion()==false)
recuperacion+="Error Semantico: no se  encuentra inicializada la variable "+a.image+" En la Linea "+a.beginLine+" en la columna "+a.beginColumn+ "\u005cn";
}
}



}//


//si el dato esta bien se asigna el valor
static void asignar(String a) {

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a))
{
  contenedores.get(i).setAsignacion(true);
}
}



}//


static public boolean validarDeclarado(Token token)
{
boolean val=false;


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
return true;

}

}
return false;


}

  static final public SimpleNode Programa() throws ParseException {
 /*@bgen(jjtree) Programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        Sentencias();
        jj_consume_token(0);
       {if (true) return jjtn000;}
      } catch (ParseException e) {
   error_skipto(TERMINALDELINEA);
   {if (true) return jjtn000;}
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Sentencias() throws ParseException {
                    /*@bgen(jjtree) Sentencias */
                    SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      SimpleStm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SI:
      case NUMERO:
      case CADENA:
      case ESCRIBIR:
      case ID:
        Sentencias();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimpleStm() throws ParseException {
                   /*@bgen(jjtree) SimpleStm */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
        case CADENA:
          declaracion();
          break;
        case ESCRIBIR:
          escribir();
          break;
        case ID:
          asignacion();
          break;
        case SI:
          condicional();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
   error_skipto(TERMINALDELINEA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condicional() throws ParseException {
 /*@bgen(jjtree) condicional */
   SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t; D1=new Token();D2=new Token();operador= new Token();cambio=0;activoif=true;
    try {
      t = jj_consume_token(SI);
               SimpleNode jjtn001 = new SimpleNode(JJTCONDICIONALSI);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
              jjtn001.value = t.image;
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
      }
      dat();
      opcion();
      dat();
      t = jj_consume_token(ENTONCES);
                    SimpleNode jjtn002 = new SimpleNode(JJTCONDICIONALENTONCES);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
                    jjtree.closeNodeScope(jjtn002,  true);
                    jjtc002 = false;
                   validar(D1,D2,operador);jjtn002.value = t.image;activoif=false;
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  true);
                    }
      }
      SimpleStm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELOCONTRARIO:
        t = jj_consume_token(DELOCONTRARIO);
                         SimpleNode jjtn003 = new SimpleNode(JJTCONDICIONALDELOCONTRARIO);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
        try {
                         jjtree.closeNodeScope(jjtn003,  true);
                         jjtc003 = false;
                        jjtn003.value = t.image;
        } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003,  true);
                         }
        }
        Sentencias();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      t = jj_consume_token(FINSI);
                 SimpleNode jjtn004 = new SimpleNode(JJTCONDICIONALFINSI);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
      try {
                 jjtree.closeNodeScope(jjtn004,  true);
                 jjtc004 = false;
                  jjtn004.value = t.image;
      } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  true);
                 }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void dat() throws ParseException {
            /*@bgen(jjtree) dat */
            SimpleNode jjtn000 = new SimpleNode(JJTDAT);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
              SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
                 jjtn001.value = t.image;

        if(D1!=null) {
          cambio++;

                  if(D1.image==null&&cambio==1)
                        D1=t;

         if(D2.image==null&&cambio==2)
          D2=t;

      }
      //if(!activo)
                inicializada(t);

        if(activoif){
          System.out.println("entro"+t.image);
        verificarAsignacion(t);
    }
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
        }
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                SimpleNode jjtn002 = new SimpleNode(JJTNUMEROENTERO);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
        try {
                jjtree.closeNodeScope(jjtn002,  true);
                jjtc002 = false;
                   jjtn002.value = t.image;
        } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  true);
                }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void opcion() throws ParseException {
                 /*@bgen(jjtree) opcion */
                   SimpleNode jjtn000 = new SimpleNode(JJTOPCION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENORQ:
        t = jj_consume_token(MENORQ);
              SimpleNode jjtn001 = new SimpleNode(JJTMENORQUE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
             jjtn001.value = t.image;
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
        }
        break;
      case MAYORQ:
        t = jj_consume_token(MAYORQ);
                                                                    SimpleNode jjtn002 = new SimpleNode(JJTMAYORQUE);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
        try {
                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                    jjtc002 = false;
                                                                   jjtn002.value = t.image;
        } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                    }
        }
        break;
      case MAYORIGUAL:
        t = jj_consume_token(MAYORIGUAL);
                  SimpleNode jjtn003 = new SimpleNode(JJTMAYORIGUAL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
        try {
                  jjtree.closeNodeScope(jjtn003,  true);
                  jjtc003 = false;
                 jjtn003.value = t.image;
        } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  true);
                  }
        }
        break;
      case MENORIGUAL:
        t = jj_consume_token(MENORIGUAL);
                                                                              SimpleNode jjtn004 = new SimpleNode(JJTMENORIGUAL);
                                                                              boolean jjtc004 = true;
                                                                              jjtree.openNodeScope(jjtn004);
        try {
                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                              jjtc004 = false;
                                                                             jjtn004.value = t.image;
        } finally {
                                                                              if (jjtc004) {
                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                              }
        }
        break;
      case COMPARAR:
        t = jj_consume_token(COMPARAR);
                SimpleNode jjtn005 = new SimpleNode(JJTCOMPARAR);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
        try {
                jjtree.closeNodeScope(jjtn005,  true);
                jjtc005 = false;
               jjtn005.value = t.image;
        } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005,  true);
                }
        }
        break;
      case DIFERENTE:
        t = jj_consume_token(DIFERENTE);
                                                                         SimpleNode jjtn006 = new SimpleNode(JJTDIFERENTE);
                                                                         boolean jjtc006 = true;
                                                                         jjtree.openNodeScope(jjtn006);
        try {
                                                                         jjtree.closeNodeScope(jjtn006,  true);
                                                                         jjtc006 = false;
                                                                        jjtn006.value = t.image;
        } finally {
                                                                         if (jjtc006) {
                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                         }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void asignacion() throws ParseException {
 /*@bgen(jjtree) asignacion */
   SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;asignar=new Token(); asignar_id=new Token(); activo=true;
    try {
      t = jj_consume_token(ID);
                SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               jjtn001.value = t.image; asignar=t;
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
      }
      t = jj_consume_token(ASIGNAR);
                   SimpleNode jjtn002 = new SimpleNode(JJTASIGNACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                  jjtn002.value = t.image;
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
      }
      valor();
      t = jj_consume_token(TERMINALDELINEA);
                        SimpleNode jjtn003 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
      try {
                        jjtree.closeNodeScope(jjtn003,  true);
                        jjtc003 = false;
                       jjtn003.value = t.image;
  if(acumular.size()==0&&asignar_id.image!=null){
    verificar_asignacion(asignar,asignar_id);
  }
  analizarAsignacion(asignar);
  acumular.clear();activo=false;
      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  true);
                        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void valor() throws ParseException {
 /*@bgen(jjtree) valor */
   SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENADETEXTO:
        t = jj_consume_token(CADENADETEXTO);
                           SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
        try {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                          jjtn001.value = t.image;
  if(activo)
  {if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0)
  { asignar(asignar.image);
  }else
  {
     if(!buscar(asignar.image).equals("Cadena"))
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Cadena:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\u005cn"; }
   }
        } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          t = jj_consume_token(CONCATENAR);
                   SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
          try {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                  jjtn002.value = t.image;
          } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
          }
          concatenaciones();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                   SimpleNode jjtn003 = new SimpleNode(JJTNUMEROENTERO);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
        try {
                   jjtree.closeNodeScope(jjtn003,  true);
                   jjtc003 = false;
                  jjtn003.value = t.image;acumular.add(t); if(activo){if(buscar(asignar.image).equals("Numero")&&acumular.size()==0)asignar(asignar.image); }
        } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  true);
                   }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD_OP:
        case MULT_OP:
          operadores();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case ID:
        t = jj_consume_token(ID);
              SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
        try {
              jjtree.closeNodeScope(jjtn004,  true);
              jjtc004 = false;
             jjtn004.value = t.image;verificardeclarado(t); acumular.add(t);
      if(!activo)
                inicializada(t);
        } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004,  true);
              }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD_OP:
        case MULT_OP:
          operadores();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      case LEER:
        leer();
        break;
      case ABREC:
        t = jj_consume_token(ABREC);
             SimpleNode jjtn005 = new SimpleNode(JJTCORCHETEABRE);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
        try {
             jjtree.closeNodeScope(jjtn005,  true);
             jjtc005 = false;
            jjtn005.value = t.image;acumular.add(t);
        } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  true);
             }
        }
        valor();
        jj_consume_token(CIERRAC);
                                                                                           SimpleNode jjtn006 = new SimpleNode(JJTCORCHETECIERRA);
                                                                                           boolean jjtc006 = true;
                                                                                           jjtree.openNodeScope(jjtn006);
        try {
                                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                                           jjtc006 = false;
                                                                                          jjtn006.value = t.image;acumular.add(t);
        } finally {
                                                                                           if (jjtc006) {
                                                                                             jjtree.closeNodeScope(jjtn006,  true);
                                                                                           }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD_OP:
        case MULT_OP:
          operadores();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operadores() throws ParseException {
 /*@bgen(jjtree) operadores */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_OP:
        t = jj_consume_token(ADD_OP);
               SimpleNode jjtn001 = new SimpleNode(JJTOPERADORADD);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
        try {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
              jjtn001.value = t.image;acumular.add(t);
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
        }
        valor();
        break;
      case MULT_OP:
        t = jj_consume_token(MULT_OP);
               SimpleNode jjtn002 = new SimpleNode(JJTOPERADORMULT);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
               jjtree.closeNodeScope(jjtn002,  true);
               jjtc002 = false;
              jjtn002.value = t.image;acumular.add(t);
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  true);
               }
        }
        valor();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void leer() throws ParseException {
 /*@bgen(jjtree) leer */
 SimpleNode jjtn000 = new SimpleNode(JJTLEER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LEER);
            SimpleNode jjtn001 = new SimpleNode(JJTLEER);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
           jjtn001.value = t.image;
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
      }
      t = jj_consume_token(ABREC);
              SimpleNode jjtn002 = new SimpleNode(JJTCORCHETEABRE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
             jjtn002.value = t.image;
      } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
      }
      t = jj_consume_token(CIERRAC);
                SimpleNode jjtn003 = new SimpleNode(JJTCORCHETECIERRA);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
                jjtree.closeNodeScope(jjtn003,  true);
                jjtc003 = false;
               jjtn003.value = t.image;asignar(asignar.image);
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  true);
                }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void escribir() throws ParseException {
 /*@bgen(jjtree) escribir */
 SimpleNode jjtn000 = new SimpleNode(JJTESCRIBIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ESCRIBIR);
                     SimpleNode jjtn001 = new SimpleNode(JJTESCRIBIR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                    jjtn001.value = t.image;
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
      }
      t = jj_consume_token(ABREC);
                 SimpleNode jjtn002 = new SimpleNode(JJTCORCHETEABRE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
      try {
                 jjtree.closeNodeScope(jjtn002,  true);
                 jjtc002 = false;
                  jjtn002.value = t.image;
      } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  true);
                 }
      }
      datos();
      t = jj_consume_token(CIERRAC);
                   SimpleNode jjtn003 = new SimpleNode(JJTCORCHETECIERRA);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003,  true);
                   jjtc003 = false;
                    jjtn003.value = t.image;
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  true);
                   }
      }
      t = jj_consume_token(TERMINALDELINEA);
                        SimpleNode jjtn004 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
      try {
                        jjtree.closeNodeScope(jjtn004,  true);
                        jjtc004 = false;
                       jjtn004.value = t.image;
      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004,  true);
                        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void datos() throws ParseException {
 /*@bgen(jjtree) datos */
 SimpleNode jjtn000 = new SimpleNode(JJTDATOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENADETEXTO:
        t = jj_consume_token(CADENADETEXTO);
                           SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
        try {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                          jjtn001.value = t.image;
        } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          t = jj_consume_token(CONCATENAR);
                         SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
          try {
                         jjtree.closeNodeScope(jjtn002,  true);
                         jjtc002 = false;
                        jjtn002.value = t.image;
          } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  true);
                         }
          }
          concatenaciones();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      case ID:
        t = jj_consume_token(ID);
                SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFICADOR);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
        try {
                jjtree.closeNodeScope(jjtn003,  true);
                jjtc003 = false;
               jjtn003.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
                inicializada(t);

    inicializada(t);
        verificarAsignacion(t);
        } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  true);
                }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          t = jj_consume_token(CONCATENAR);
                         SimpleNode jjtn004 = new SimpleNode(JJTCONCATENACION);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
          try {
                         jjtree.closeNodeScope(jjtn004,  true);
                         jjtc004 = false;
                        jjtn004.value = t.image;
          } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004,  true);
                         }
          }
          concatenaciones();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void concatenaciones() throws ParseException {
 /*@bgen(jjtree) concatenaciones */
 SimpleNode jjtn000 = new SimpleNode(JJTCONCATENACIONES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENADETEXTO:
        t = jj_consume_token(CADENADETEXTO);
                     SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                    jjtn001.value = t.image;if(activo){
    if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0){
    asignar(asignar.image);
  }else{
    if(!buscar(asignar.image).equals("Cadena"))
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Numero:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\u005cn";
  }

  }
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          t = jj_consume_token(CONCATENAR);
                   SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
          try {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                  jjtn002.value = t.image;
          } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
          }
          concatenaciones();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      case ID:
        t = jj_consume_token(ID);
          SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFICADOR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jjtree.closeNodeScope(jjtn003,  true);
          jjtc003 = false;
         jjtn003.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
                inicializada(t);

          inicializada(t);
        verificarAsignacion(t);
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  true);
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATENAR:
          t = jj_consume_token(CONCATENAR);
                   SimpleNode jjtn004 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
          try {
                   jjtree.closeNodeScope(jjtn004,  true);
                   jjtc004 = false;
                  jjtn004.value = t.image;
          } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004,  true);
                   }
          }
          concatenaciones();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void declaracion() throws ParseException {
 /*@bgen(jjtree) declaracion */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; c= new contenedor();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        t = jj_consume_token(NUMERO);
                    SimpleNode jjtn001 = new SimpleNode(JJTENTERO);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
                    jjtree.closeNodeScope(jjtn001,  true);
                    jjtc001 = false;
                       jjtn001.value = t.image; tipo=t.image;
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  true);
                    }
        }
        t = jj_consume_token(ID);
              SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
               jjtn002.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
      }
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          masIds();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        t = jj_consume_token(TERMINALDELINEA);
                        SimpleNode jjtn003 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
        try {
                        jjtree.closeNodeScope(jjtn003,  true);
                        jjtc003 = false;
                       jjtn003.value = t.image;
        } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  true);
                        }
        }
        break;
      case CADENA:
        t = jj_consume_token(CADENA);
                  SimpleNode jjtn004 = new SimpleNode(JJTSTRING);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
                  jjtree.closeNodeScope(jjtn004,  true);
                  jjtc004 = false;
                   jjtn004.value = t.image;tipo=t.image;
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  true);
                  }
        }
        t = jj_consume_token(ID);
              SimpleNode jjtn005 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
        try {
              jjtree.closeNodeScope(jjtn005,  true);
              jjtc005 = false;
               jjtn005.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
         }
        } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005,  true);
              }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          masIds();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        t = jj_consume_token(TERMINALDELINEA);
                        SimpleNode jjtn006 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
        try {
                        jjtree.closeNodeScope(jjtn006,  true);
                        jjtc006 = false;
                       jjtn006.value = t.image;
        } finally {
                        if (jjtc006) {
                          jjtree.closeNodeScope(jjtn006,  true);
                        }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void masIds() throws ParseException {
 /*@bgen(jjtree) masIds */
   SimpleNode jjtn000 = new SimpleNode(JJTMASIDS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t; c=new contenedor();
    try {
      t = jj_consume_token(COMA);
                  SimpleNode jjtn001 = new SimpleNode(JJTCOMA);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtc001 = false;
                     jjtn001.value = t.image;
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  true);
                  }
      }
      t = jj_consume_token(ID);
              SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
               jjtn002.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c); }
      } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        masIds();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x15800040,0x15800040,0x200,0x18000000,0x3f000,0x40000000,0x600000,0x600000,0x600000,0x3a080000,0x600000,0x40000000,0x40000000,0x30000000,0x40000000,0x40000000,0x30000000,0x0,0x0,0x1800000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 //















}
