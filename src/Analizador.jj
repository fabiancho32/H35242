/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(AnalizadorLexico)
public class AnalizadorLexico
{
  static int numero = 0;

  private static void grabarLexema(int n, String token, String lexema, int nL, int nC)
  {
    System.out.println(n + "- Token: " + token + " Lexema: " + lexema + " Linea: " + nL + " Columna:" + nC);
  }

  private static void grabarDatosPieza(int n, String token, Token pieza)
  {
    grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn);
  }

  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Ingrese el c\u00f3digo a analizar:");
      AnalizadorLexico parser = new AnalizadorLexico(System.in);
      parser.TokenList();
      System.out.println("Analisis terminado:");
      System.out.println("no se han hallado errores l\u00e9xicos");
    }
    catch (TokenMgrError te)
    {
      System.out.println("Se han encontrado errores lexicos.");
      System.out.println(te.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Analizador: Se han encontrado errores en el analisis.");
      System.out.println(e.getMessage());	
    }
  }
}

PARSER_END(AnalizadorLexico)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* OPERATORS */
{
  < SUMA : "+" >
| < MULTIPLICACION : "*" >
| < ASIGNACION : "=" >
| < RESTA : "-" >
| < DIVISION : "/" >
| < MAYORQUE : ">" >
| < MENORQUE : "<" >
}

TOKEN : /*TERMINAL DE LINEA*/
{
  < TERMINALDELINEA : "." >
}

TOKEN : /*PALABRAS RESERVADAS*/
{
  < ENTERO : "Numero" >
| < STRING : "Cadena" >
| < CONDICIONALSI : "Si" >
| < CONDICIONALFINSI : "FinSi" >
| < CONDICIONALDELOCONTRARIO : "Sino" >
| < CONDICIONALENTONCES : "Entonces" >
| < ESCRIBIR : "Escribir" >
| < LEER : "Leer" >
}

TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
< IDENTIFICADOR :["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
| < #DIGIT : [ "0"-"9" ] >
| < #LMINUS : [ "a"-"z" ] >

}

TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < NUMEROENTERO :
    (
      [ "-" ]
    )?
    (< DIGIT >)+ >
}

TOKEN : /*COMENTARIOS*/
{
  < COMENTARIOS : ([ "#" ]) ([ "#" ]) (~[ "#" ])* ([ "#" ]) ([ "#" ]) >
}

TOKEN : /*CADENA DE TEXTO*/
{
  < CADENADETEXTO : ([ "\"" ]) (~[ "\"" ])* ([ "\"" ]) >
}

TOKEN : /*CONCATENAR*/
{
  < CONCATENACION :
    (
      (
        (< CADENADETEXTO >) ([ "@" ]) (< CADENADETEXTO >)
      )
    | (< IDENTIFICADOR >) ([ "@" ]) (< CADENADETEXTO >)
    ) >
}

TOKEN : /*Simbolos*/
{
  < CORCHETEABRE : "[" >
| < CORCHETECIERRA : "]" >
| < COMA : "," >
}

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
void TokenList() :
{}
{
  (
    TokenElement()
  )*
}

void TokenElement() :
{
  Token pieza;
}
{
  /*OPERADORES*/
  pieza = < SUMA >
  {
    numero++;
    grabarDatosPieza(numero, "SUMA", pieza);
  }
| pieza = < MULTIPLICACION >
  {
    numero++;
    grabarDatosPieza(numero, "MULTIPLICACION", pieza);
  }
| pieza = < ASIGNACION >
  {
    numero++;
    grabarDatosPieza(numero, "ASIGNACION", pieza);
  }
| pieza = < RESTA >
  {
    numero++;
    grabarDatosPieza(numero, "RESTA", pieza);
  }
| pieza = < DIVISION >
  {
    numero++;
    grabarDatosPieza(numero, "DIVISION", pieza);
  }
| pieza = < MAYORQUE >
  {
    numero++;
    grabarDatosPieza(numero, "MAYORQUE", pieza);
  }
| pieza = < MENORQUE >
  {
    numero++;
    grabarDatosPieza(numero, "MENORQUE", pieza);
  }
  /*CONCATENACION*/
| pieza = < CONCATENACION >
  {
    numero++;
    grabarDatosPieza(numero, "CONCATENACION", pieza);
  }
  /*TERMINAL DE LINEA*/
| pieza = < TERMINALDELINEA >
  {
    numero++;
    grabarDatosPieza(numero, "TERMINALDELINEA", pieza);
  }
  /*PALABRAS RESERVADAS*/
| pieza = < ENTERO >
  {
    numero++;
    grabarDatosPieza(numero, "ENTERO", pieza);
  }
| pieza = < STRING >
  {
    numero++;
    grabarDatosPieza(numero, "STRING", pieza);
  }
| pieza = < CONDICIONALSI >
  {
    numero++;
    grabarDatosPieza(numero, "CONDICIONALSI", pieza);
  }
| pieza = < CONDICIONALFINSI >
  {
    numero++;
    grabarDatosPieza(numero, "CONDICIONALFINSI", pieza);
  }
| pieza = < CONDICIONALDELOCONTRARIO >
  {
    numero++;
    grabarDatosPieza(numero, "CONDICIONALDELOCONTRARIO", pieza);
  }
| pieza = < CONDICIONALENTONCES >
  {
    numero++;
    grabarDatosPieza(numero, "CONDICIONALENTONCES", pieza);
  }
| pieza = < ESCRIBIR >
  {
    numero++;
    grabarDatosPieza(numero, "ESCRIBIR", pieza);
  }
| pieza = < LEER >
  {
    numero++;
    grabarDatosPieza(numero, "LEER", pieza);
  }
  /*NUMEROS*/
| pieza = < NUMEROENTERO >
  {
    numero++;
    grabarDatosPieza(numero, "NUMEROENTERO", pieza);
  }
  /*IDENTIFICADORES*/
| pieza = < IDENTIFICADOR >
  {
    numero++;
    grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
  }
  /*COMENTARIOS*/
| pieza = < COMENTARIOS >
  {
    numero++;
    grabarDatosPieza(numero, "COMENTARIOS", pieza);
  }
  /*CADENA DE TEXTO*/
| pieza = < CADENADETEXTO >
  {
    numero++;
    grabarDatosPieza(numero, "CADENADETEXTO", pieza);
  }
  /*SIMBOLOS*/
| pieza = < COMA >
  {
    numero++;
    grabarDatosPieza(numero, "COMA", pieza);
  }
| pieza = < CORCHETEABRE >
  {
    numero++;
    grabarDatosPieza(numero, "CORCHETEABRE", pieza);
  }
| pieza = < CORCHETECIERRA >
  {
    numero++;
    grabarDatosPieza(numero, "CORCHETECIERRA", pieza);
  }
}
