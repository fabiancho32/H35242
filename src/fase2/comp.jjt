/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(comp)
public class comp
{
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Ingrese el c\u00f3digo a analizar:");
      comp analizador = new comp(System.in);
      SimpleNode variable=analizador.Programa();
      variable.dump("");
      System.out.println("Se ha compilado con \u00e9xito");
    }
    catch (ParseException e)
    {
      System.err.println("Se han encontrado errores");
      System.err.println(e.getMessage());
    }
  }
}

PARSER_END(comp)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* OPERATORS */
{
  < SUMA : "+" >
| < MULTIPLICACION : "*" >
| < ASIGNACION : "=" >
| < RESTA : "-" >
| < DIVISION : "/" >
| < MAYORQUE : ">" >
| < MENORQUE : "<" >
}

TOKEN : /*TERMINAL DE LINEA*/
{
  < TERMINALDELINEA : "." >
}

TOKEN : /*PALABRAS RESERVADAS*/
{
  < ENTERO : "Numero" >
| < STRING : "Cadena" >
| < CONDICIONALSI : "Si" >
| < CONDICIONALFINSI : "FinSi" >
| < CONDICIONALDELOCONTRARIO : "Sino" >
| < CONDICIONALENTONCES : "Entonces" >
| < ESCRIBIR : "Escribir" >
| < LEER : "Leer" >
}

TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
< IDENTIFICADOR :["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
| < #DIGIT : [ "0"-"9" ] >
| < #LMINUS : [ "a"-"z" ] >

}

TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < NUMEROENTERO :
    (
      [ "-" ]
    )?
    (< DIGIT >)+ >
}

TOKEN : /*COMENTARIOS*/
{
  < COMENTARIOS : ([ "#" ]) ([ "#" ]) (~[ "#" ])* ([ "#" ]) ([ "#" ]) >
}

TOKEN : /*CADENA DE TEXTO*/
{
  < CADENADETEXTO : ([ "\"" ]) (~[ "\"" ])* ([ "\"" ]) >
}

TOKEN : /*CONCATENAR*/
{
  < CONCATENACION :
    (
      (
        (< CADENADETEXTO >) ([ "@" ]) (< CADENADETEXTO >)
      )
    |
      (
        (< IDENTIFICADOR >) ([ "@" ]) (< CADENADETEXTO >)
      )
    | 
      (
      	(< CADENADETEXTO >) ([ "@" ]) (< IDENTIFICADOR >)
      )
    |
      (
        (< IDENTIFICADOR >) ([ "@" ]) (< IDENTIFICADOR >)
      )
    ) >
}

TOKEN : /*Simbolos*/
{
  < CORCHETEABRE : "[" >
| < CORCHETECIERRA : "]" >
| < COMA : "," >
}

/*BNF... inicio analizador sintactico*/

SimpleNode Programa() :
{}
{
  Instrucciones() < FINARCH >
  {
    return jjtThis;
  }
}

void Instrucciones() :
{Token t;}
{
  (

	SimpleInt() t=<TERMINALDELINEA> {jjtThis.value = t.image;} #PUNTO(true) [ Sentencias() ]
  )
}

void SimpleInt() :
{}
{
  declaracion()
| asignacion()
| condicional()
| Escribir()
| comentrarios()
| imprmir()
}

void declaracion() :
{Token t;}
{
  t=<ENTERO> {jjtThis.value = t.image;} #ENTERO(true)
  t= <IDENTIFICADOR> {jjtThis.value = t.image;} #IDENTIFICADOR(true)
  [masidentificadores()]
  
  | t=<CADENADETEXTO>{jjtThis.value = t.image;} #CADENADETEXTO(true)
  	t= <IDENTIFICADOR> {jjtThis.value = t.image;} #IDENTIFICADOR(true)
  	[masidentificadores()]
  	
}

void masidentificadores() :
{Token t;}
{
  t=<COMA> {jjtThis.value = t.image;} #COMA(true)
  t= <IDENTIFICADOR> {jjtThis.value = t.image;} #IDENTIFICADOR(true)
  [masidentificadores()]
}
/*?*/
void asignacion() :
{Token t;}
{
  term()
  (
    t=< ADD_OP >{jjtThis.value = t.image;} #OPERADD(true) term()
  )*
}




void term() :
{Token t;}
{
  factor()
  (
    t=< MULT_OP >{jjtThis.value = t.image;} #OPERMUL(true) factor()
  )*
}

void factor() :
{Token t;}
{
  t=< LPAREN >{jjtThis.value = t.image;} #ABRIRP(true) expresion() t=< RPAREN >{jjtThis.value = t.image;} #CERRARP(true)
| t=<NUMBER> {jjtThis.value = t.image;} #NUMERO(true)
| t=<ID> {jjtThis.value = t.image;} #IDENT(true)
}
