/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
public class AnalizadorLexico implements AnalizadorLexicoConstants {

   static int numero = 0;

   private static void grabarLexema (int n, String token,  String lexema, int nL, int nC) {
      System.out.println(n + "- Token: "+  token + " Lexema:" + lexema + " Linea: "+ nL + "Columna:" + nC);
   }

   private static void grabarDatosPieza(int n, String token, Token pieza) {
      grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn );
   }


  public static void main(String args []) throws ParseException
  {
        try
        {
           System.out.println("Ingrese el c\u00f3digo a analizar:");
           AnalizadorLexico parser = new AnalizadorLexico(System.in);
       parser.TokenList();

       System.out.println("Analisis terminado:");
       System.out.println("no se han hallado errores l\u00e9xicos");


    }catch(TokenMgrError te)
        {
           System.out.println("Se han encontrado errores lexicos.");
           System.out.println(te.getMessage());

        }
    catch(ParseException e)
        {
           System.out.println("Analizador: Se han encontrado errores en el analisis.");
           System.out.println(e.getMessage());
        }
  }

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
  static final public void TokenList() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case MULTIPLICACION:
      case ASIGNACION:
      case RESTA:
      case DIVISION:
      case NUMEROENTERO:
      case IDENTIFICADOR:
      case CORCHETEABRE:
      case CORCHETECIERRA:
      case PUNTO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      TokenElement();
    }
  }

  static final public void TokenElement() throws ParseException {
 Token pieza;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      pieza = jj_consume_token(SUMA);
                   numero++; grabarDatosPieza(numero, "SUMA" , pieza);
      break;
    case MULTIPLICACION:
      pieza = jj_consume_token(MULTIPLICACION);
                             numero++; grabarDatosPieza(numero, "MULTIPLICACION", pieza);
      break;
    case RESTA:
      pieza = jj_consume_token(RESTA);
                    numero++; grabarDatosPieza(numero, "RESTA", pieza);
      break;
    case DIVISION:
      pieza = jj_consume_token(DIVISION);
                       numero++; grabarDatosPieza(numero, "DIVISION", pieza);
      break;
    case ASIGNACION:
      pieza = jj_consume_token(ASIGNACION);
                         numero++; grabarDatosPieza(numero, "ASIGNACION", pieza);
      break;
    case IDENTIFICADOR:
      pieza = jj_consume_token(IDENTIFICADOR);
                            numero++; grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
      break;
    case NUMEROENTERO:
      pieza = jj_consume_token(NUMEROENTERO);
                           numero++; grabarDatosPieza(numero, "NUMEROENTERO", pieza);
      break;
    case PUNTO:
      pieza = jj_consume_token(PUNTO);
                    numero++; grabarDatosPieza(numero, "PUNTO", pieza);
      break;
    case CORCHETEABRE:
      pieza = jj_consume_token(CORCHETEABRE);
                           numero++; grabarDatosPieza(numero, "CORCHETEABRE", pieza);
      break;
    case CORCHETECIERRA:
      pieza = jj_consume_token(CORCHETECIERRA);
                             numero++; grabarDatosPieza(numero, "CORCHETECIERRA", pieza);
      pieza = jj_consume_token(MAYORQUE);
                       numero++; grabarDatosPieza(numero, "MAYORQUE", pieza);
      pieza = jj_consume_token(MENORQUE);
                       numero++; grabarDatosPieza(numero, "MENORQUE", pieza);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e807c0,0x1e807c0,};
   }

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
