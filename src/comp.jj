/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. comp.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(comp)
import java.util.ArrayList;
public class comp/*@bgen(jjtree)*/implements compTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTcompState jjtree = new JJTcompState();

/*@egen*/
  static String recuperacion="";
   public static ArrayList<contenedor> contenedores= new ArrayList<contenedor>();
   static String tipo="";
   public static contenedor c;

   static  Token operador;
 static Token D1;
 static Token D2;
static int cambio=0;
  public static ArrayList<Token> acumular= new ArrayList<Token>();
static Boolean activo=false;
 static Boolean activoif=false;
 static Token asignar;
static Token asignar_id;


  public static ArrayList<Token> getAcumular() {
	return acumular;
}

public static void setAcumular(ArrayList<Token> acumular) {
	comp.acumular = acumular;
}


  public static ArrayList<contenedor> getContenedores() {
	return contenedores;
}

public static void setContenedores(ArrayList<contenedor> contenedores) {
	comp.contenedores = contenedores;
}
 
  
  public static String getRecuperacion()
  {
    return recuperacion;
  }

  public static void setRecuperacion(String recuperacion)
  {
    comp.recuperacion = recuperacion;
  }

  
 public static void error_skipto(int kind)
  {
	
    ParseException e = generateParseException(); // se genera el objeto excepci\u00f3n
    recuperacion= recuperacion.concat(e.toString()+"\n");
    System.out.println(e.toString()); // se imprime el mensaje de error
    Token t;
    do
    {
      t = getNextToken();
       System.out.println("hola"+t);
    }
  while (t.kind != kind && t.kind==FINARCH);
  }
    
  public static void main(String args []) throws ParseException
  {

	try
	{
	  System.out.println("Ingrese el c\u00f3digo a analizar:");
	  comp analizador = new comp(System.in);
	  SimpleNode variable= analizador.Programa();
	  variable.dump("");
	  System.out.println("Se ha compilado con \u00e9xito");
	}
	catch(ParseException e)
	{
	  System.err.println("Se han encontrado errores");
	  System.err.println(e.getMessage());
	  
	}

  }



//semantico


//busca si ya esta el token
static public boolean verificarRepetido(Token token)
{
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro==true)
{
recuperacion+="Error Semantico:  ya se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
return false;
}
else
return true; 
}//

//verifica que este declarado
static public void verificardeclarado(Token token) {

boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro!=true)
{
recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
}
/*
else {

  if(!buscarTipo(token).equals("Cadena")) 
recuperacion+="Error Semantico:  no es tipo cadena encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";

  }
*/




}//

//asigna el valor concuerda con el tipo
static void verificar_asignacion(Token a,Token b)
{
  
String dato1=" ",dato2="";

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}

if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico: no se  le puede asignar a esta variable: "+a.image+" no son del mismo tipo: "+" En la Linea "+a.beginLine+", en la columna "+a.beginColumn+ "\n";
recuperacion+="Error Semantico: no se puede asignar: "+b.image+" En la Linea "+b.beginLine+" ,en la columna "+b.beginColumn+ "\n";
}
else {

asignar(a.image);
  }



  
  
}//


//devuelve tipo
static String buscar(String identificador)
{
  String dato=" "; 

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(identificador))
{

dato=contenedores.get(i).getTipo();
 
} 
}
return dato;
  
}//



//verifica que el token se encuentre
static void inicializada(Token t) {
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro==false)
{

int intIndex = recuperacion.indexOf("Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n");

if(intIndex==-1){  
  
recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
}

}

/*
if(encontro==true) {
if(!buscar(t.image).equals("Cadena")) {
recuperacion+="Error Semantico: la variable debe de ser tipo cadena : "+t.image+" En la Linea "+t.beginLine+"en la columna "+t.beginColumn+ "\n";

  }
  

  }
*/


}//cierra funcion



//validar if
static void validar(Token a, Token b ,Token operador) {
String dato1=" ";
String dato2=" ";


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}
if(a.image!=null&&b.image!=null)
{
  

if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico:  no son del mismo tipo las variables: "+a.image+" , "+b.image  + " En la Linea "+a.beginLine+",en la columna "+a.beginColumn+ "\n";
}

if("<=".equals(operador.image)||">=".equals(operador.image)||"<".equals(operador.image)||">".equals(operador.image) )
{
if(!dato1.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \t " +a.image+" En la Linea "+a.beginLine+",en la columna "+a.beginColumn+"\n";

if(!dato2.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \t "+b.image+" En la Linea "+b.beginLine+",en la columna "+b.beginColumn+ "\n";
}

}



}//cierra funcion



static void analizarAsignacion(Token a) {
 String tipo=buscar(a.image);
Boolean entrociclo=false;
   for(int i=1;i<acumular.size();i++)
   {
      if(!acumular.get(i).image.equals("+")&&!acumular.get(i).image.equals("-")&&!acumular.get(i).image.equals("*")&&!acumular.get(i).image.equals("/")&&!acumular.get(i).image.equals("]") ) {
             String tipo2=buscar(acumular.get(i).image);

             if(!tipo.equals(tipo2)&&validarDeclarado(acumular.get(i))==true) { 
   			recuperacion+="Error Semantico: no se puede asignar esta variable "+acumular.get(i).image+" En la Linea "+acumular.get(i).beginLine+" en la columna "+acumular.get(i).beginColumn+" no es del mismo tipo: "+tipo2+" con la variable: "+a.image+" de tipo: " +tipo+ "\n";
   			entrociclo=true;
   			}else
   			verificarAsignacion(acumular.get(i));		 
      }
    }

if(!entrociclo) {
asignar(a.image);
}

     }//


//se encarga de analizar si el token tiene una asignacion 
static void verificarAsignacion(Token a) {



for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  if(contenedores.get(i).getAsignacion()==false)
recuperacion+="Error Semantico: no se  encuentra inicializada la variable "+a.image+" En la Linea "+a.beginLine+" en la columna "+a.beginColumn+ "\n";  
}
}



}//


//si el dato esta bien se asigna el valor
static void asignar(String a) {

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a))
{
  contenedores.get(i).setAsignacion(true);
}
}



}//


static public boolean validarDeclarado(Token token)
{
boolean val=false;


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
return true;
 
}
  
}
return false;
  
  
}//














  
}

PARSER_END(comp)


SKIP:   /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
| < COMENTARIO : ("##") (~[ "#" ])* ("##") >
}

TOKEN:
{

 <SI: "Si">
| <ENTONCES: "Entonces">
| <FINSI: "FinSi">
| < DELOCONTRARIO : "Sino" >
| < FINDELOCONTRARIO : "FinSino" >
| < ASIGNAR: "=" >
| < COMPARAR : "==" >
| <MAYORQ: ">">
| <MENORQ: "<">
| < MAYORIGUAL : ">=" >
| < MENORIGUAL : "<=" >
| < DIFERENTE : "!=" >
| <COMILLA: "\"">
| <ABREC: "[">
| <CIERRAC: "]">
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
| <NUMERO: "Numero">
| <CADENA: "Cadena">
| <LEER: "Leer">
| <ESCRIBIR: "Escribir">
| <NUMBER: (["0"-"9"])+>
|  < ID: [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
| < CADENADETEXTO : ("\"") (~[ "\"" ])* ("\"") >
| < CONCATENAR :"@" >
| <TERMINALDELINEA: "." >
| <FINARCH: "?">
| < COMA:  "," >
}



SimpleNode Programa():
{/*@bgen(jjtree) Programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Programa */
try {
/*@egen*/

try { 
	Sentencias()<EOF>
    {  return jjtn000; }
  }
 catch(ParseException e) {
   error_skipto(TERMINALDELINEA);
   return jjtn000;
 }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
	
}

void Sentencias(): {/*@bgen(jjtree) Sentencias */
                    SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Sentencias */
  try {
/*@egen*/
  SimpleStm()  [Sentencias()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SimpleStm(): {/*@bgen(jjtree) SimpleStm */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleStm */
  try {
/*@egen*/
  try { 
   declaracion() | escribir() | asignacion() |condicional()
 }
 catch(ParseException e) {
   error_skipto(TERMINALDELINEA);
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}





void condicional() :
{/*@bgen(jjtree) condicional */
   SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t; D1=new Token();D2=new Token();operador= new Token();cambio=0;activoif=true; }
{/*@bgen(jjtree) condicional */
  try {
/*@egen*/
  t = < SI >/*@bgen(jjtree) #CONDICIONALSI( true) */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTCONDICIONALSI);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
             }
/*@egen*/                    
  dat()
  opcion()
  dat()
  t = < ENTONCES >/*@bgen(jjtree) #CONDICIONALENTONCES( true) */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTCONDICIONALENTONCES);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002,  true);
                    jjtc002 = false;
                  }
/*@egen*/{validar(D1,D2,operador);jjtn002.value = t.image;activoif=false; }/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  true);
                    }
                  }
/*@egen*/                          
  SimpleStm()
  [
  t = < DELOCONTRARIO >/*@bgen(jjtree) #CONDICIONALDELOCONTRARIO( true) */
                       {
                         SimpleNode jjtn003 = new SimpleNode(JJTCONDICIONALDELOCONTRARIO);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003,  true);
                         jjtc003 = false;
                       }
/*@egen*/{jjtn003.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003,  true);
                         }
                       }
/*@egen*/                               
  Sentencias()
  ]
  t = < FINSI >/*@bgen(jjtree) #CONDICIONALFINSI( true) */
               {
                 SimpleNode jjtn004 = new SimpleNode(JJTCONDICIONALFINSI);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn004,  true);
                 jjtc004 = false;
               }
/*@egen*/{  jjtn004.value = t.image;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  true);
                 }
               }
/*@egen*/                       /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}


void dat():{/*@bgen(jjtree) dat */
            SimpleNode jjtn000 = new SimpleNode(JJTDAT);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) dat */
  try {
/*@egen*/

  t = <ID>/*@bgen(jjtree) #IDENTIFICADOR( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/  {    jjtn001.value = t.image;

        if(D1!=null) {
          cambio++;

		  if(D1.image==null&&cambio==1) 
			D1=t;
       
         if(D2.image==null&&cambio==2)
          D2=t;

      }
      //if(!activo)
		inicializada(t);
	
	if(activoif){
	  System.out.println("entro"+t.image); 
	verificarAsignacion(t);
    }

		  }/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/                    
| t=< NUMBER >/*@bgen(jjtree) #NUMEROENTERO( true) */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTNUMEROENTERO);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn002,  true);
                jjtc002 = false;
              }
/*@egen*/{    jjtn002.value = t.image;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  true);
                }
              }
/*@egen*/                   /*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}





void opcion() : {/*@bgen(jjtree) opcion */
                   SimpleNode jjtn000 = new SimpleNode(JJTOPCION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}
{/*@bgen(jjtree) opcion */
  try {
/*@egen*/
  t=<MENORQ>/*@bgen(jjtree) #MENORQUE( true) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMENORQUE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
            }
/*@egen*/{jjtn001.value = t.image;}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
            }
/*@egen*/                 |t=<MAYORQ>/*@bgen(jjtree) #MAYORQUE( true) */
                                                                  {
                                                                    SimpleNode jjtn002 = new SimpleNode(JJTMAYORQUE);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
                                                                  }
                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                    jjtc002 = false;
                                                                  }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                                                  } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                    }
                                                                  }
/*@egen*/                 
 |t=<MAYORIGUAL>/*@bgen(jjtree) #MAYORIGUAL( true) */
                {
                  SimpleNode jjtn003 = new SimpleNode(JJTMAYORIGUAL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn003,  true);
                  jjtc003 = false;
                }
/*@egen*/{jjtn003.value = t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  true);
                  }
                }
/*@egen*/                   |t=<MENORIGUAL>/*@bgen(jjtree) #MENORIGUAL( true) */
                                                                            {
                                                                              SimpleNode jjtn004 = new SimpleNode(JJTMENORIGUAL);
                                                                              boolean jjtc004 = true;
                                                                              jjtree.openNodeScope(jjtn004);
                                                                            }
                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                              jjtc004 = false;
                                                                            }
/*@egen*/{jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                                                            } finally {
                                                                              if (jjtc004) {
                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                              }
                                                                            }
/*@egen*/                   
 |t=<COMPARAR>/*@bgen(jjtree) #COMPARAR( true) */
              {
                SimpleNode jjtn005 = new SimpleNode(JJTCOMPARAR);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn005,  true);
                jjtc005 = false;
              }
/*@egen*/{jjtn005.value = t.image;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005,  true);
                }
              }
/*@egen*/                 |t=<DIFERENTE>/*@bgen(jjtree) #DIFERENTE( true) */
                                                                       {
                                                                         SimpleNode jjtn006 = new SimpleNode(JJTDIFERENTE);
                                                                         boolean jjtc006 = true;
                                                                         jjtree.openNodeScope(jjtn006);
                                                                       }
                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn006,  true);
                                                                         jjtc006 = false;
                                                                       }
/*@egen*/{jjtn006.value = t.image;}/*@bgen(jjtree)*/
                                                                       } finally {
                                                                         if (jjtc006) {
                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                         }
                                                                       }
/*@egen*/                  /*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




void asignacion() :
{/*@bgen(jjtree) asignacion */
   SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;asignar=new Token(); asignar_id=new Token(); activo=true;  }
{/*@bgen(jjtree) asignacion */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree) #IDENTIFICADOR( true) */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/  {jjtn001.value = t.image; asignar=t; }/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/                      
  t = < ASIGNAR >/*@bgen(jjtree) #ASIGNACION( true) */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTASIGNACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
                 }
/*@egen*/                 
  valor()
  t =<TERMINALDELINEA>/*@bgen(jjtree) #TERMINAL( true) */
                      {
                        SimpleNode jjtn003 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003,  true);
                        jjtc003 = false;
                      }
/*@egen*/{jjtn003.value = t.image;
  if(acumular.size()==0&&asignar_id.image!=null){
    verificar_asignacion(asignar,asignar_id);
  }
  analizarAsignacion(asignar);
  acumular.clear();activo=false;


  }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  true);
                        }
                      }
/*@egen*/               /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void valor() :
{/*@bgen(jjtree) valor */
   SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}
{/*@bgen(jjtree) valor */
  try {
/*@egen*/
  t = < CADENADETEXTO >/*@bgen(jjtree) #CADENATEXTO( true) */
                         {
                           SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                         }
/*@egen*/  {jjtn001.value = t.image;
  if(activo)
  {if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0)
  { asignar(asignar.image);
  }else
  {
     if(!buscar(asignar.image).equals("Cadena"))  
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Cadena:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\n"; }
   } }/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
                         }
/*@egen*/                    
  [t=<CONCATENAR>/*@bgen(jjtree) #CONCATENACION( true) */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
                 }
/*@egen*/                    
	concatenaciones()
	]
| t = <NUMBER >/*@bgen(jjtree) #NUMEROENTERO( true) */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTNUMEROENTERO);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003,  true);
                   jjtc003 = false;
                 }
/*@egen*/  {jjtn003.value = t.image;acumular.add(t); if(activo){if(buscar(asignar.image).equals("Numero")&&acumular.size()==0)asignar(asignar.image); } }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  true);
                   }
                 }
/*@egen*/                     
  [operadores()] 
| t = <ID>/*@bgen(jjtree) #IDENTIFICADOR( true) */
            {
              SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn004,  true);
              jjtc004 = false;
            }
/*@egen*/  {jjtn004.value = t.image;verificardeclarado(t); acumular.add(t);
      if(!activo)
		inicializada(t); }/*@bgen(jjtree)*/
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004,  true);
              }
            }
/*@egen*/                      
  [operadores()]
| leer()
|t= <ABREC>/*@bgen(jjtree) #CORCHETEABRE( true) */
           {
             SimpleNode jjtn005 = new SimpleNode(JJTCORCHETEABRE);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn005,  true);
             jjtc005 = false;
           }
/*@egen*/{jjtn005.value = t.image;acumular.add(t); }/*@bgen(jjtree)*/
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  true);
             }
           }
/*@egen*/                   valor()<CIERRAC>/*@bgen(jjtree) #CORCHETECIERRA( true) */
                                                                                         {
                                                                                           SimpleNode jjtn006 = new SimpleNode(JJTCORCHETECIERRA);
                                                                                           boolean jjtc006 = true;
                                                                                           jjtree.openNodeScope(jjtn006);
                                                                                         }
                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                         {
                                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                                           jjtc006 = false;
                                                                                         }
/*@egen*/{jjtn006.value = t.image;acumular.add(t); }/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc006) {
                                                                                             jjtree.closeNodeScope(jjtn006,  true);
                                                                                           }
                                                                                         }
/*@egen*/                      [operadores()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}


void operadores():
{/*@bgen(jjtree) operadores */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) operadores */
  try {
/*@egen*/
  t=<ADD_OP>/*@bgen(jjtree) #OPERADORADD( true) */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTOPERADORADD);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.value = t.image;acumular.add(t);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
             }
/*@egen*/                    
  valor()
| t=<MULT_OP>/*@bgen(jjtree) #OPERADORMULT( true) */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTOPERADORMULT);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002,  true);
               jjtc002 = false;
             }
/*@egen*/{jjtn002.value = t.image;acumular.add(t);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  true);
               }
             }
/*@egen*/                     
  valor()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void leer():
{/*@bgen(jjtree) leer */
 SimpleNode jjtn000 = new SimpleNode(JJTLEER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) leer */
  try {
/*@egen*/
  t=<LEER>/*@bgen(jjtree) #LEER( true) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTLEER);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.value = t.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/           
  t=<ABREC >/*@bgen(jjtree) #CORCHETEABRE( true) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTCORCHETEABRE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
            }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
            }
/*@egen*/                   
  t=<CIERRAC >/*@bgen(jjtree) #CORCHETECIERRA( true) */
              {
                SimpleNode jjtn003 = new SimpleNode(JJTCORCHETECIERRA);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn003,  true);
                jjtc003 = false;
              }
/*@egen*/{jjtn003.value = t.image;asignar(asignar.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  true);
                }
              }
/*@egen*/                     /*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void escribir() :
{/*@bgen(jjtree) escribir */
 SimpleNode jjtn000 = new SimpleNode(JJTESCRIBIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) escribir */
  try {
/*@egen*/
  t = < ESCRIBIR >/*@bgen(jjtree) #ESCRIBIR( true) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTESCRIBIR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/               
  t = < ABREC >/*@bgen(jjtree) #CORCHETEABRE( true) */
               {
                 SimpleNode jjtn002 = new SimpleNode(JJTCORCHETEABRE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn002,  true);
                 jjtc002 = false;
               }
/*@egen*/{  jjtn002.value = t.image;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  true);
                 }
               }
/*@egen*/                   
  datos() 
  t = < CIERRAC >/*@bgen(jjtree) #CORCHETECIERRA( true) */
                 {
                   SimpleNode jjtn003 = new SimpleNode(JJTCORCHETECIERRA);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003,  true);
                   jjtc003 = false;
                 }
/*@egen*/{  jjtn003.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  true);
                   }
                 }
/*@egen*/                     
  t =<TERMINALDELINEA>/*@bgen(jjtree) #TERMINAL( true) */
                      {
                        SimpleNode jjtn004 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004,  true);
                        jjtc004 = false;
                      }
/*@egen*/{jjtn004.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004,  true);
                        }
                      }
/*@egen*/               /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void datos():
{/*@bgen(jjtree) datos */
 SimpleNode jjtn000 = new SimpleNode(JJTDATOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) datos */
        try {
/*@egen*/
	t=<CADENADETEXTO>/*@bgen(jjtree) #CADENATEXTO( true) */
                         {
                           SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                         }
/*@egen*/{jjtn001.value = t.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
                         }
/*@egen*/                  
	[t=<CONCATENAR>/*@bgen(jjtree) #CONCATENACION( true) */
                       {
                         SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002,  true);
                         jjtc002 = false;
                       }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  true);
                         }
                       }
/*@egen*/                    
	concatenaciones()
	]
|	t=<ID>/*@bgen(jjtree) #IDENTIFICADOR( true) */
              {
                SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFICADOR);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn003,  true);
                jjtc003 = false;
              }
/*@egen*/{jjtn003.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
		inicializada(t);

    inicializada(t);
	verificarAsignacion(t);
    


		 }/*@bgen(jjtree)*/
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  true);
                }
              }
/*@egen*/                    
	[t=<CONCATENAR>/*@bgen(jjtree) #CONCATENACION( true) */
                       {
                         SimpleNode jjtn004 = new SimpleNode(JJTCONCATENACION);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004,  true);
                         jjtc004 = false;
                       }
/*@egen*/{jjtn004.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004,  true);
                         }
                       }
/*@egen*/                    
	concatenaciones()
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void concatenaciones():
{/*@bgen(jjtree) concatenaciones */
 SimpleNode jjtn000 = new SimpleNode(JJTCONCATENACIONES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) concatenaciones */
  try {
/*@egen*/
  t=<CADENADETEXTO>/*@bgen(jjtree) #CADENATEXTO( true) */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTCADENATEXTO);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.value = t.image;if(activo){
    if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0){
    asignar(asignar.image);
  }else{
    if(!buscar(asignar.image).equals("Cadena"))
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Numero:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\n";
  }

  }
   }/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/                  
  [t=<CONCATENAR>/*@bgen(jjtree) #CONCATENACION( true) */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002,  true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  true);
                   }
                 }
/*@egen*/                    
  concatenaciones()
  ]
| t=<ID>/*@bgen(jjtree) #IDENTIFICADOR( true) */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFICADOR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003,  true);
          jjtc003 = false;
        }
/*@egen*/{jjtn003.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
		inicializada(t);

          inicializada(t);
	verificarAsignacion(t);
            

		}/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  true);
          }
        }
/*@egen*/                    
  [t=<CONCATENAR>/*@bgen(jjtree) #CONCATENACION( true) */
                 {
                   SimpleNode jjtn004 = new SimpleNode(JJTCONCATENACION);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn004,  true);
                   jjtc004 = false;
                 }
/*@egen*/{jjtn004.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004,  true);
                   }
                 }
/*@egen*/                    
  concatenaciones()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion() :
{/*@bgen(jjtree) declaracion */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; c= new contenedor();}
{/*@bgen(jjtree) declaracion */
  try {
/*@egen*/
  t = < NUMERO >/*@bgen(jjtree) #ENTERO( true) */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTENTERO);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001,  true);
                    jjtc001 = false;
                  }
/*@egen*/  {    jjtn001.value = t.image; tipo=t.image;  }/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  true);
                    }
                  }
/*@egen*/               
  t = < ID >/*@bgen(jjtree) #IDENTIFICADOR( true) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
            }
/*@egen*/{  jjtn002.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
      }}/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
            }
/*@egen*/                    
  [ masIds() ]
  t =<TERMINALDELINEA>/*@bgen(jjtree) #TERMINAL( true) */
                      {
                        SimpleNode jjtn003 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003,  true);
                        jjtc003 = false;
                      }
/*@egen*/{jjtn003.value = t.image; }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003,  true);
                        }
                      }
/*@egen*/               
| t = < CADENA >/*@bgen(jjtree) #STRING( true) */
                {
                  SimpleNode jjtn004 = new SimpleNode(JJTSTRING);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn004,  true);
                  jjtc004 = false;
                }
/*@egen*/{  jjtn004.value = t.image;tipo=t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  true);
                  }
                }
/*@egen*/             
  t = < ID >/*@bgen(jjtree) #IDENTIFICADOR( true) */
            {
              SimpleNode jjtn005 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn005,  true);
              jjtc005 = false;
            }
/*@egen*/{  jjtn005.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
         } }/*@bgen(jjtree)*/
            } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005,  true);
              }
            }
/*@egen*/                    
  [ masIds() ]
  t =<TERMINALDELINEA>/*@bgen(jjtree) #TERMINAL( true) */
                      {
                        SimpleNode jjtn006 = new SimpleNode(JJTTERMINAL);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn006,  true);
                        jjtc006 = false;
                      }
/*@egen*/{jjtn006.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc006) {
                          jjtree.closeNodeScope(jjtn006,  true);
                        }
                      }
/*@egen*/               /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void masIds() :
{/*@bgen(jjtree) masIds */
   SimpleNode jjtn000 = new SimpleNode(JJTMASIDS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t; c=new contenedor();}
{/*@bgen(jjtree) masIds */
  try {
/*@egen*/
  t = < COMA >/*@bgen(jjtree) #COMA( true) */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTCOMA);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtc001 = false;
                }
/*@egen*/  {    jjtn001.value = t.image;  }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  true);
                  }
                }
/*@egen*/             
  t = < ID >/*@bgen(jjtree) #IDENTIFICADOR( true) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFICADOR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtc002 = false;
            }
/*@egen*/{  jjtn002.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c); }                 }/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  true);
              }
            }
/*@egen*/                    
  [ masIds() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
