/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}


PARSER_BEGIN(AnalizadorSintactico)
public class AnalizadorSintactico
{
  static String recuperacion="";
  public static void error_skipto(int kind)
  {
	
    ParseException e = generateParseException(); // se genera el objeto excepción
	recuperacion=recuperacion.concat(e.toString()+"\n");
    System.out.println(e.toString()); // se imprime el mensaje de error
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != kind && (t.kind != 16|t.kind !=35));
  }
  
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Ingrese el código a analizar:");
      AnalizadorSintactico analizador = new AnalizadorSintactico(System.in);
      SimpleNode variable = analizador.Programa();
      variable.dump("");
      System.out.println("Se ha compilado con éxito");
    }
    catch (ParseException e)
    {
      System.err.println("Se han encontrado errores");
      System.err.println(e.getMessage());
    }
  }
}

PARSER_END(AnalizadorSintactico)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| < COMENTARIOS : ("##") (~[ "#" ])* ("##") >
}

TOKEN : /* OPERATORS */
{
  < ASIGNACION : "=" >
| < DIFERENTE : "!=" >
| < MAYORQUE : ">" >
| < MENORQUE : "<" >
| < MAYORIGUAL : ">=" >
| < MENORIGUAL : "<=" >
| < COMPARAR : "==" >
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
}

TOKEN : /*TERMINAL DE LINEA*/
{
  < TERMINALDELINEA : "." >
}

TOKEN : /*PALABRAS RESERVADAS*/
{
  < ENTERO : "Numero" >
| < STRING : "Cadena" >
| < CONDICIONALSI : "Si" >
| < CONDICIONALFINSI : "FinSi" >
| < CONDICIONALDELOCONTRARIO : "Sino" >
| < CONDICIONALFINDELOCONTRARIO : "FinSino" >
| < CONDICIONALENTONCES : "Entonces" >
| < ESCRIBIR : "Escribir" >
| < LEER : "Leer" >
}

TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR : ([ "a"-"z", "A"-"Z" ])([ "a"-"z", "A"-"Z", "0"-"9" ])* >
| < #DIGIT : [ "0"-"9" ] >
| < #LMINUS : [ "a"-"z" ] >
}

TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < NUMEROENTERO : 
    (
    [ "-" ]
    )? 
    (< DIGIT >)+ >
}



TOKEN : /*CADENA DE TEXTO*/
{
  < CADENADETEXTO : ([ "\"" ]) (~[ "\"" ])* ([ "\"" ]) >
}

TOKEN : /*CONCATENAR*/
{
  < CONCATENACION :"@">
}

TOKEN : /*Simbolos*/
{
  < CORCHETEABRE : "[" >
| < CORCHETECIERRA : "]" >
| < COMA : "," >
| < FINARCH : "?" >
}

SimpleNode Programa() :
{}
{
  try
  {
    listadoSentencias()<FINARCH>{return jjtThis;}
  }
  catch (ParseException e)
  {
    error_skipto(TERMINALDELINEA|FINARCH);
    return jjtThis;
  }  
}

void listadoSentencias() :
{Token t;}
{
	try
	{
	  SentenciaSmp()     
  	  [listadoSentencias()]
	}
   catch (ParseException e)
   {
     error_skipto(TERMINALDELINEA|FINARCH);     
   }
}

void SentenciaSmp() :
{}
{
  condicional()
| escribir()
| asignacion()
| declaracion()
}

void condicional() :
{  Token t;}
{
  t = < CONDICIONALSI > {jjtThis.value = t.image;}#CONDICIONALSI(true)
  t = <IDENTIFICADOR>  {    jjtThis.value = t.image;}#IDENTIFICADOR(true)
  condicionales()
  t = <IDENTIFICADOR>  {    jjtThis.value = t.image;}#IDENTIFICADOR(true)
  t = < CONDICIONALENTONCES >{jjtThis.value = t.image;}#CONDICIONALENTONCES(true)
  listadoSentencias()
  t = < CONDICIONALFINSI >{  jjtThis.value = t.image;}#CONDICIONALFINSI(true)
  [
  t = < CONDICIONALDELOCONTRARIO >{jjtThis.value = t.image;}#CONDICIONALDELOCONTRARIO(true)
  listadoSentencias()
  t = < CONDICIONALFINDELOCONTRARIO >{  jjtThis.value = t.image;}#CONDICIONALFINDELOCONTRARIO(true)
  ]
}

void condicionales() :
{Token t;}
{
  t =< MAYORQUE>{jjtThis.value = t.image;}#MAYORQUE(true)
  |t=< MENORQUE>{jjtThis.value = t.image;}#MENORQUE(true)
  |t=< MAYORIGUAL>{jjtThis.value = t.image;}#MAYORIGUAL(true)
  |t=< MENORIGUAL>{jjtThis.value = t.image;}#MENORIGUAL(true)
  |t=< COMPARAR>{jjtThis.value = t.image;}#COMPARAR(true)
  |t=< DIFERENTE>{jjtThis.value = t.image;}#DIFERENTE(true)
}

void asignacion() :
{  Token t;}
{
  t = < IDENTIFICADOR >  {jjtThis.value = t.image;  }  #IDENTIFICADOR(true)
  t = < ASIGNACION >{jjtThis.value = t.image;}#ASIGNACION(true)
  valor()
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
}

void valor() :
{  Token t;}
{
  t = < CADENADETEXTO >  {jjtThis.value = t.image;  }  #CADENATEXTO(true)
| t = <NUMEROENTERO >  {jjtThis.value = t.image;  }  #NUMEROENTERO(true)
  [operadores()] 
| t = <IDENTIFICADOR >  {jjtThis.value = t.image;  }  #IDENTIFICADOR(true)
  [operadores()]
| leer() 
}

void operadores():
{Token t;}
{
  t=<ADD_OP> {jjtThis.value = t.image;}#OPERADORADD(true)  
  valor()
| t=<MULT_OP>{jjtThis.value = t.image;}#OPERADORMULT(true)  
  valor()
}

void leer():
{Token t;}
{
  t=<LEER>{jjtThis.value = t.image;}#LEER(true)
  t=<CORCHETEABRE >{jjtThis.value = t.image;}#CORCHETEABRE(true)
  t=<CORCHETECIERRA >{jjtThis.value = t.image;}#CORCHETECIERRA(true) 
}

void escribir() :
{Token t;}
{
  t = < ESCRIBIR > {jjtThis.value = t.image;}#ESCRIBIR(true)
  t = < CORCHETEABRE >{  jjtThis.value = t.image;}#CORCHETEABRE(true)
  datos() 
  t = < CORCHETECIERRA >{  jjtThis.value = t.image;}#CORCHETECIERRA(true)
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
}

void datos():
{Token t;}
{
	t=<CADENADETEXTO>{jjtThis.value = t.image;}#CADENATEXTO(true)
	[t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
	concatenaciones()
	]
|	t=<IDENTIFICADOR>{jjtThis.value = t.image;}#IDENTIFICADOR(true)
	[t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
	concatenaciones()
	]
}

void concatenaciones():
{Token t;}
{
  t=<CADENADETEXTO>{jjtThis.value = t.image;}#CADENATEXTO(true)
  [t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
  concatenaciones()
  ]
| t=<IDENTIFICADOR>{jjtThis.value = t.image;}#IDENTIFICADOR(true)
  [t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
  concatenaciones()
  ]
}

void declaracion() :
{ Token t;}
{
  t = < ENTERO >  {    jjtThis.value = t.image;  }  #ENTERO(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;}#IDENTIFICADOR(true)
  [ masIds() ]
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
| t = < STRING >{  jjtThis.value = t.image;}#STRING(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;}#IDENTIFICADOR(true)
  [ masIds() ]
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
}

void masIds() :
{  Token t;}
{
  t = < COMA >  {    jjtThis.value = t.image;  }  #COMA(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;}#IDENTIFICADOR(true)
  [ masIds() ]
}