/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}


PARSER_BEGIN(AnalizadorSintactico)
import java.util.ArrayList;
public class AnalizadorSintactico
{
  static String recuperacion="";
   public static ArrayList<contenedor> contenedores= new ArrayList<contenedor>();
   static String tipo="";
   public static contenedor c;

 static  Token operador;
 static Token D1;
 static Token D2;
static int cambio=0;
  public static ArrayList<Token> acumular= new ArrayList<Token>();
static Boolean activo=false;
 static Boolean activoif=false;
 static Token asignar;
static Token asignar_id; 


  public static String getRecuperacion() {
	return recuperacion;
  }

  public static void setRecuperacion(String recuperacion) {
	AnalizadorSintactico.recuperacion = recuperacion;
  }

  
  public static void error_skipto(int kind)
  {
    ParseException e = generateParseException(); // se genera el objeto excepción
	recuperacion=recuperacion.concat(e.toString()+"\n");
    System.out.println(e.toString()); // se imprime el mensaje de error
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != kind && t.kind==EOF);
  }
  
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Ingrese el código a analizar:");
      AnalizadorSintactico analizador = new AnalizadorSintactico(System.in);
      SimpleNode variable = analizador.Programa();
      //variable.dump("");
    System.out.println(recuperacion);
 
      for (int i = 0; i < contenedores.size(); i++) {
		System.out.println(contenedores.get(i).getNombre());    	  
	}

	

      System.out.println("Se ha compilado con éxito");
    }
    catch (ParseException e)
    {
      System.err.println("Se han encontrado errores");
      System.err.println(e.getMessage());
    }
  }//


//busca si ya esta el token
static public boolean verificarRepetido(Token token)
{
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro==true)
{
recuperacion+="Error Semantico:  ya se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
return false;
}
else
return true; 
}//

//verifica que este declarado
static public void verificardeclarado(Token token) {

boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro!=true)
{
recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
}
/*
else {

  if(!buscarTipo(token).equals("Cadena")) 
recuperacion+="Error Semantico:  no es tipo cadena encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";

  }
*/




}//

//asigna el valor concuerda con el tipo
static void verificar_asignacion(Token a,Token b)
{
  
String dato1=" ",dato2="";

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}

if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico: no se  le puede asignar a esta variable: "+a.image+" no son del mismo tipo: "+" En la Linea "+a.beginLine+", en la columna "+a.beginColumn+ "\n";
recuperacion+="Error Semantico: no se puede asignar: "+b.image+" En la Linea "+b.beginLine+" ,en la columna "+b.beginColumn+ "\n";
}
else {

asignar(a.image);
  }



  
  
}//


//devuelve tipo
static String buscar(String identificador)
{
  String dato=" "; 

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(identificador))
{

dato=contenedores.get(i).getTipo();
 
} 
}
return dato;
  
}//



//verifica que el token se encuentre
static void inicializada(Token t) {
boolean encontro=false;

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
  encontro=true;
}
  
}

if(encontro==false)
{

int intIndex = recuperacion.indexOf("Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n");

if(intIndex==-1){  
  
recuperacion+="Error Semantico:  no se encuentra declarada la variable: "+token.image+" En la Linea "+token.beginLine+",en la columna "+token.beginColumn+ "\n";
}

}

/*
if(encontro==true) {
if(!buscar(t.image).equals("Cadena")) {
recuperacion+="Error Semantico: la variable debe de ser tipo cadena : "+t.image+" En la Linea "+t.beginLine+"en la columna "+t.beginColumn+ "\n";

  }
  

  }
*/


}//cierra funcion



//validar if
static void validar(Token a, Token b ,Token operador) {
String dato1=" ";
String dato2=" ";


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  dato1=buscar(a.image);
}

if(contenedores.get(i).getNombre().equals(b.image))
{
  dato2=buscar(b.image);
}

}
if(a.image!=null&&b.image!=null)
{
  

if(!dato1.equals(dato2)) {
recuperacion+="Error Semantico:  no son del mismo tipo las variables: "+a.image+" , "+b.image  + " En la Linea "+a.beginLine+",en la columna "+a.beginColumn+ "\n";
}

if("<=".equals(operador.image)||">=".equals(operador.image)||"<".equals(operador.image)||">".equals(operador.image) )
{
if(!dato1.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \t " +a.image+" En la Linea "+a.beginLine+",en la columna "+a.beginColumn+"\n";

if(!dato2.equals("Numero"))
recuperacion+="Error Semantico:  no se puede operar una cadena con este operador "+operador.image +" \t "+b.image+" En la Linea "+b.beginLine+",en la columna "+b.beginColumn+ "\n";
}

}



}//cierra funcion



static void analizarAsignacion(Token a) {
 String tipo=buscar(a.image);
Boolean entrociclo=false;
   for(int i=1;i<acumular.size();i++)
   {
      if(!acumular.get(i).image.equals("+")&&!acumular.get(i).image.equals("-")&&!acumular.get(i).image.equals("*")&&!acumular.get(i).image.equals("/")&&!acumular.get(i).image.equals("]") ) {
             String tipo2=buscar(acumular.get(i).image);

             if(!tipo.equals(tipo2)&&validarDeclarado(acumular.get(i))==true) { 
   			recuperacion+="Error Semantico: no se puede asignar esta variable "+acumular.get(i).image+" En la Linea "+acumular.get(i).beginLine+" en la columna "+acumular.get(i).beginColumn+" no es del mismo tipo: "+tipo2+" con la variable:"+a.image+" de tipo: " +tipo+"\n";
   			entrociclo=true;
   			}else
   			verificarAsignacion(acumular.get(i));		 
      }
    }

if(!entrociclo) {
asignar(a.image);
}

     }//


//se encarga de analizar si el token tiene una asignacion 
static void verificarAsignacion(Token a) {



for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a.image))
{
  if(contenedores.get(i).getAsignacion()==false)
recuperacion+="Error Semantico: no se  encuentra inicializada la variable "+a.image+" En la Linea "+a.beginLine+" en la columna "+a.beginColumn+ "\n";  
}
}



}//


//si el dato esta bien se asigna el valor
static void asignar(String a) {

for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(a))
{
  contenedores.get(i).setAsignacion(true);
}
}



}//


static public boolean validarDeclarado(Token token)
{
boolean val=false;


for(int i=0;i<contenedores.size();i++)
{
if(contenedores.get(i).getNombre().equals(token.image))
{
return true;
 
}
  
}
return false;
  
  
}//



}//class

PARSER_END(AnalizadorSintactico)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| < COMENTARIOS : ("##") (~[ "#" ])* ("##") >
}

TOKEN : /* OPERATORS */
{
  < ASIGNACION : "=" >
| < DIFERENTE : "!=" >
| < MAYORQUE : ">" >
| < MENORQUE : "<" >
| < MAYORIGUAL : ">=" >
| < MENORIGUAL : "<=" >
| < COMPARAR : "==" >
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
}

TOKEN : /*TERMINAL DE LINEA*/
{
  < TERMINALDELINEA : "." >
}

TOKEN : /*PALABRAS RESERVADAS*/
{
  < ENTERO : "Numero" >
| < STRING : "Cadena" >
| < CONDICIONALSI : "Si" >
| < CONDICIONALFINSI : "FinSi" >
| < CONDICIONALDELOCONTRARIO : "Sino" >
| < CONDICIONALFINDELOCONTRARIO : "FinSino" >
| < CONDICIONALENTONCES : "Entonces" >
| < ESCRIBIR : "Escribir" >
| < LEER : "Leer" >
}

TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR : ([ "a"-"z", "A"-"Z" ])([ "a"-"z", "A"-"Z", "0"-"9" ])* >
| < #DIGIT : [ "0"-"9" ] >
| < #LMINUS : [ "a"-"z" ] >
}

TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < NUMEROENTERO : 
    (
    [ "-" ]
    )? 
    (< DIGIT >)+ >
}



TOKEN : /*CADENA DE TEXTO*/
{
  < CADENADETEXTO : ([ "\"" ]) (~[ "\"" ])* ([ "\"" ]) >
}

TOKEN : /*CONCATENAR*/
{
  < CONCATENACION :"@">
}

TOKEN : /*Simbolos*/
{
  < CORCHETEABRE : "[" >
| < CORCHETECIERRA : "]" >
| < COMA : "," >
}

SimpleNode Programa() :
{}
{
  try
  {
    listadoSentencias()<EOF>{return jjtThis;}
  }
  catch (ParseException e)
  {
    error_skipto(TERMINALDELINEA);
    return jjtThis;
  }  
}

void listadoSentencias() :
{Token t;}
{
	try
	{
	  SentenciaSmp()     
  	  [listadoSentencias()]
	}
   catch (ParseException e)
   {
     error_skipto(TERMINALDELINEA);     
   }
}

void SentenciaSmp() :
{}
{
  condicional()
| escribir()
| asignacion()
| declaracion()
}

void condicional() :
{  Token t; D1=new Token();D2=new Token();operador= new Token();cambio=0;activoif=true; }
{
  t = < CONDICIONALSI > {jjtThis.value = t.image;}#CONDICIONALSI(true)
  dat()
  condicionales()
  dat()
  t = < CONDICIONALENTONCES >{validar(D1,D2,operador);jjtThis.value = t.image;activoif=false; }#CONDICIONALENTONCES(true)
  listadoSentencias()
  [
  t = < CONDICIONALDELOCONTRARIO >{jjtThis.value = t.image;}#CONDICIONALDELOCONTRARIO(true)
  listadoSentencias()
  ]
  t = < CONDICIONALFINSI >{  jjtThis.value = t.image;}#CONDICIONALFINSI(true)
  
}


void dat():{Token t;}
{

  t = <IDENTIFICADOR>  {    jjtThis.value = t.image;

        if(D1!=null) {
          cambio++;

		  if(D1.image==null&&cambio==1) 
			D1=t;
       
         if(D2.image==null&&cambio==2)
          D2=t;

      }
      //if(!activo)
		inicializada(t);
	
	if(activoif){
	  System.out.println("entro"+t.image); 
	verificarAsignacion(t);
    }

		  }#IDENTIFICADOR(true)
| t=< NUMEROENTERO >{    jjtThis.value = t.image;}#NUMEROENTERO(true)


}


void condicionales() :
{Token t;}
{
  t =< MAYORQUE>{jjtThis.value = t.image;operador=t;}#MAYORQUE(true)
  |t=< MENORQUE>{jjtThis.value = t.image;operador=t;}#MENORQUE(true)
  |t=< MAYORIGUAL>{jjtThis.value = t.image;operador=t;}#MAYORIGUAL(true)
  |t=< MENORIGUAL>{jjtThis.value = t.image;operador=t;}#MENORIGUAL(true)
  |t=< COMPARAR>{jjtThis.value = t.image;operador=t;}#COMPARAR(true)
  |t=< DIFERENTE>{jjtThis.value = t.image;operador=t;}#DIFERENTE(true)
}

void asignacion() :
{  Token t;asignar=new Token(); asignar_id=new Token(); activo=true;  }
{
  t = < IDENTIFICADOR >  {jjtThis.value = t.image; asignar=t; }  #IDENTIFICADOR(true)
  t = < ASIGNACION >{jjtThis.value = t.image;}#ASIGNACION(true)
  valor()
  t =<TERMINALDELINEA>{jjtThis.value = t.image;
  if(acumular.size()==0&&asignar_id.image!=null){
    verificar_asignacion(asignar,asignar_id);
  }
  analizarAsignacion(asignar);
  acumular.clear();activo=false;


  }#TERMINAL(true)
}

void valor() :
{  Token t;}
{
  t = < CADENADETEXTO >  {jjtThis.value = t.image;
  if(activo)
  {if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0)
  { asignar(asignar.image);
  }else
  {
     if(!buscar(asignar.image).equals("Cadena"))  
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Cadena:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\n"; }
   } }  #CADENATEXTO(true)
  [t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
	concatenaciones()
	]
| t = <NUMEROENTERO >  {jjtThis.value = t.image;acumular.add(t); if(activo){if(buscar(asignar.image).equals("Numero")&&acumular.size()==0)asignar(asignar.image); } }  #NUMEROENTERO(true)
  [operadores()] 
| t = <IDENTIFICADOR >  {jjtThis.value = t.image;verificardeclarado(t); acumular.add(t);
      if(!activo)
		inicializada(t); }  #IDENTIFICADOR(true)
  [operadores()]
| leer()
|t= <CORCHETEABRE>{jjtThis.value = t.image;acumular.add(t); }#CORCHETEABRE(true)valor()<CORCHETECIERRA>{jjtThis.value = t.image;acumular.add(t); }#CORCHETECIERRA(true) [operadores()]

}

void operadores():
{Token t;}
{
  t=<ADD_OP> {jjtThis.value = t.image;acumular.add(t);}#OPERADORADD(true)  
  valor()
| t=<MULT_OP>{jjtThis.value = t.image;acumular.add(t);}#OPERADORMULT(true)  
  valor()
}

void leer():
{Token t;}
{
  t=<LEER>{jjtThis.value = t.image;}#LEER(true)
  t=<CORCHETEABRE >{jjtThis.value = t.image;}#CORCHETEABRE(true)
  t=<CORCHETECIERRA >{jjtThis.value = t.image;asignar(asignar.image);}#CORCHETECIERRA(true) 
}

void escribir() :
{Token t;}
{
  t = < ESCRIBIR > {jjtThis.value = t.image;}#ESCRIBIR(true)
  t = < CORCHETEABRE >{  jjtThis.value = t.image;}#CORCHETEABRE(true)
  datos() 
  t = < CORCHETECIERRA >{  jjtThis.value = t.image;}#CORCHETECIERRA(true)
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
}

void datos():
{Token t;}
{
	t=<CADENADETEXTO>{jjtThis.value = t.image;}#CADENATEXTO(true)
	[t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
	concatenaciones()
	]
|	t=<IDENTIFICADOR>{jjtThis.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
		inicializada(t);

    inicializada(t);
	verificarAsignacion(t);
    


		 }#IDENTIFICADOR(true)
	[t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
	concatenaciones()
	]
}

void concatenaciones():
{Token t;}
{
  t=<CADENADETEXTO>{jjtThis.value = t.image;if(activo){
    if(buscar(asignar.image).equals("Cadena")&&acumular.size()==0){
    asignar(asignar.image);
  }else{
    if(!buscar(asignar.image).equals("Cadena"))
    recuperacion+="Error Semantico: no se puede asignar una cadena a una variable tipo Numero:"+t.image+" En la Linea "+t.beginLine+" en la columna "+t.beginColumn+ "\n";
  }

  }
   }#CADENATEXTO(true)
  [t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
  concatenaciones()
  ]
| t=<IDENTIFICADOR>{jjtThis.value = t.image;verificardeclarado(t);acumular.add(t);
       if(!activo)
		inicializada(t);

          inicializada(t);
	verificarAsignacion(t);
            

		}#IDENTIFICADOR(true)
  [t=<CONCATENACION>{jjtThis.value = t.image;}#CONCATENACION(true)
  concatenaciones()
  ]
}

void declaracion() :
{ Token t; c= new contenedor();}
{
  t = < ENTERO >  {    jjtThis.value = t.image; tipo=t.image;  }  #ENTERO(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
      }}#IDENTIFICADOR(true)
  [ masIds() ]
  t =<TERMINALDELINEA>{jjtThis.value = t.image; }#TERMINAL(true)
| t = < STRING >{  jjtThis.value = t.image;tipo=t.image;}#STRING(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c);
         } }#IDENTIFICADOR(true)
  [ masIds() ]
  t =<TERMINALDELINEA>{jjtThis.value = t.image;}#TERMINAL(true)
}

void masIds() :
{  Token t; c=new contenedor();}
{
  t = < COMA >  {    jjtThis.value = t.image;  }  #COMA(true)
  t = < IDENTIFICADOR >{  jjtThis.value = t.image;if(verificarRepetido(t)){ c.setTipo(tipo);c.setNombre(t.image);c.setTokenvalor(t);c.setAsignacion(false);contenedores.add(c); }                 }#IDENTIFICADOR(true)
  [ masIds() ]
}